setwd("~/Documents/7thSemester/ds/week9")
setwd("~/Documents/7thSemester/ds/week9")
## Example: Identifying Risky Bank Loans ----
## Step 2: Exploring and preparing the data ----
credit <- read.csv("credit_PACKT.csv")
str(credit)
# look at two characteristics of the applicant
table(credit$checking_balance)
table(credit$savings_balance)
# look at two characteristics of the loan
summary(credit$months_loan_duration)
summary(credit$amount)
# look at the class variable
table(credit$default)
set.seed(101)
index <- createDataPartition(credit$default, p=0.8,list=F)
library(caret)
index <- createDataPartition(credit$default, p=0.8,list=F)
credit_train <- credit[index,]
credit_test <- credit[-index,]
# check the proportion of class variable
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
set.seed(101)
index <- createDataPartition(credit$default, p=0.8,list=F)
credit_train <- credit[index,]
credit_test <- credit[-index,]
# check the proportion of class variable
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
## Step 3: Training a model on the data ----
# build the simplest decision tree
install.packages("C50")
library(C50)
?C5.0
set.seed(101)
index <- createDataPartition(credit$default, p=0.8,list=F)
credit_train <- credit[index,]
credit_test <- credit[-index,]
# check the proportion of class variable
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
# only include input variables -- not the output
# second argument is the argumment of interest
credit_model <- C5.0(credit_train[,-17], credit_train$default)
# display simple facts about the tree
credit_model
# display detailed information about the tree
summary(credit_model)
## Step 4: Evaluating model performance ----
# create a factor vector of predictions on test data
credit_pred <- predict(credit_model, credit_test)
# cross tabulation of predicted versus actual classes
library(gmodels)
CrossTable(credit_test$default, credit_pred,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
(128+19) / (121 + 19 + 60)
install.packages('party')
library(party)
data(iris)
summary(iris)
# fit model
fit <- C5.0(Species~., data=iris)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, iris[,1:4])
# summarize accuracy
table(predictions, iris$Species)
plot(fit)
install.packages("RSQLite")
library("tokenizers")
library("dplyr")
library("textclean")
library("stringr")
library("tm")
library("RSQLite")
library("tokenizers")
library("dplyr")
library("textclean")
library("stringr")
library("tm")
setwd("~/Documents/7thSemester/dmp/corpus")
##### Let's try it with the tokenizer package.
#### SPLITTING INTO SENTENCES
# manually throw a \n at the end of every line
heartOfDarkness <- scan("conrad-heart-of-darkness.txt",what="character",sep="\n")
heartOfDarkness.start<- which(heartOfDarkness == "I")
heartOfDarkness.end <- which(heartOfDarkness == "sky--seemed to lead into the heart of an immense darkness.")
heartOfDarkness<-heartOfDarkness[heartOfDarkness.start: heartOfDarkness.end]
heartOfDarkness.sents<-heartOfDarkness[-(1)]
heartOfDarkness.sents<-heartOfDarkness.sents[-(1160)]
heartOfDarkness.sents<-heartOfDarkness.sents[-(2128)]
#break near middle at full sentence.
first_half <- heartOfDarkness.sents[1:1543]
second_half<- heartOfDarkness.sents[-(1:1543)]
heartOfDarkness.sents.first <- paste0(first_half, collapse = "\n")
heartOfDarkness.sents.first <- unlist(tokenize_sentences(heartOfDarkness.sents.first))
heartOfDarkness.sents.second <- paste0(second_half, collapse = "\n")
heartOfDarkness.sents.second <- unlist(tokenize_sentences(heartOfDarkness.sents.second))
#recombine
heartOfDarkness.sents <- c(heartOfDarkness.sents.first,heartOfDarkness.sents.second)
heartOfDarkness.sents[1:10]
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
summary(con)
length(heartOfDarkness.sents)
heartOfDarkeness.title <- c("HeartOfDarkness")
?rep
heartOfDarkeness.title <- rep("HeartOfDarkness", 2503)
print(as.list(.GlobalEnv))
str(as.list(.GlobalEnv))
##### Let's try it with the tokenizer package.
#### SPLITTING INTO SENTENCES
# manually throw a \n at the end of every line
heartOfDarkness <- scan("conrad-heart-of-darkness.txt",what="character",sep="\n")
heartOfDarkness.start<- which(heartOfDarkness == "I")
heartOfDarkness.end <- which(heartOfDarkness == "sky--seemed to lead into the heart of an immense darkness.")
heartOfDarkness<-heartOfDarkness[heartOfDarkness.start: heartOfDarkness.end]
heartOfDarkness.sents<-heartOfDarkness[-(1)]
heartOfDarkness.sents<-heartOfDarkness.sents[-(1160)]
heartOfDarkness.sents<-heartOfDarkness.sents[-(2128)]
#break near middle at full sentence.
first_half <- heartOfDarkness.sents[1:1543]
second_half<- heartOfDarkness.sents[-(1:1543)]
heartOfDarkness.sents.first <- paste0(first_half, collapse = "\n")
heartOfDarkness.sents.first <- unlist(tokenize_sentences(heartOfDarkness.sents.first))
heartOfDarkness.sents.second <- paste0(second_half, collapse = "\n")
heartOfDarkness.sents.second <- unlist(tokenize_sentences(heartOfDarkness.sents.second))
#recombine
heartOfDarkness.sents <- c(heartOfDarkness.sents.first,heartOfDarkness.sents.second)
heartOfDarkness.title <- rep("HeartOfDarkness", 2503)
heartOfDarkness.sents.type <- rep("sentence", 2503)
?cbind
heartOfDarkness.sents.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.sents.type, heartOfDarkness.sents)
View(heartOfDarkness.sents.matrix)
?seq
heartOfDarkness.sents.counter <- seq(1, 2503)
heartOfDarkness.sents.counter[1:100]
heartOfDarkness.sents.counter[2503]
heartOfDarkness.id %>% paste0("HOD", "SENT", heartOfDarkness.sents.counter)
heartOfDarkness.id <- paste0("HOD", "SENT", heartOfDarkness.sents.counter)
heartOfDarkness.id[1:10]
heartOfDarkness.id <- paste0("HOD", "SENT", heartOfDarkness.sents.counter, sep="_")
heartOfDarkness.id[1:10]
heartOfDarkness.id <- paste0("HOD_", "SENT_", heartOfDarkness.sents.counter)
heartOfDarkness.id
heartOfDarkness.sents.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.sents.type, heartOfDarkness.id, heartOfDarkness.sents)
View(heartOfDarkness.sents.matrix)
?db_write_table
?`dbWriteTable,SQLiteConnection,character,character-method`
heartOfDarkness.sents.matrix[0,]
heartOfDarkness.sents.df <- as.df(heartOfDarkness.sents.matrix)
to.df
?todf
?as.df
?to.df
heartOfDarkness.sents.df <- as.data.frame(heartOfDarkness.sents.matrix)
colnames(heartOfDarkness.sents.df)
colnames(heartOfDarkness.sents.df) <- c("Title", "Type", "ID", "Unit")
heartOfDarkness.sents.df[0,]
### Columns.
dbWriteTable(con, "textTable", heartOfDarkness.sents.df[0, ])
con <- dbConnect(RSQLite::SQLite(), ":memory:")
### Columns.
dbWriteTable(con, "textTable", heartOfDarkness.sents.df[0, ])
dbListTables(con)
dbWriteTable(con, "textTable", heartOfDarkness.sents.df, append=TRUE)
dbListTables(con)
summary(con)
con <- dbConnect(RSQLite::SQLite(), ":memory:")
### Columns.
dbWriteTable(con, "textTable", heartOfDarkness.sents.df[0, ])
dbWriteTable(con, "textTable", heartOfDarkness.sents.df, append=TRUE, row.names=FALSE)
dbListTables(con)
summary(con)
dbGetQuery(con, "SELECT * FROM textTable LIMIT 10")
con <- dbConnect(RSQLite::SQLite(), ":memory:", dbname="textTable.sqlite")
### Columns.
dbWriteTable(con, "textTable", heartOfDarkness.sents.df[0, ])
dbWriteTable(con, "textTable", heartOfDarkness.sents.df, append=TRUE, row.names=FALSE)
dbGetQuery(con, "SELECT * FROM textTable LIMIT 10")
dbListTables(con)
summary(con)
dbDisconnect()
dbDisconnect(con)
heartOfDarkness <- scan("conrad-heart-of-darkness.txt",what="character",sep="\n")
heartOfDarkness.start<- which(heartOfDarkness == "I")
heartOfDarkness.end <- which(heartOfDarkness == "sky--seemed to lead into the heart of an immense darkness.")
heartOfDarkness<-heartOfDarkness[heartOfDarkness.start: heartOfDarkness.end]
heartOfDarkness.temp<-heartOfDarkness[-(1)]
heartOfDarkness.temp<-heartOfDarkness.temp[-(1160)]
heartOfDarkness.temp<-heartOfDarkness.temp[-(2128)]
## Replace Contractions
heartOfDarkness.temp<-replace_contraction(heartOfDarkness.temp)
heartOfDarkness.temp <- paste(heartOfDarkness.temp, collapse=" ")
heartOfDarkness.temp <-tolower(heartOfDarkness.temp)
heartOfDarkness.temp <- strsplit(heartOfDarkness.temp, "\\W")
heartOfDarkness.temp <-unlist(heartOfDarkness.temp)
darkness.not.blanks <- which(heartOfDarkness.temp != "")
heartOfDarknessWords <- heartOfDarkness.temp[darkness.not.blanks]
heartOfDarknessWords[1:10]
length(heartOfDarknessWords)
heartOfDarkness.title <- rep("heartOfDarkness", 39085)
heartOfDarkness.words.type <- rep("word", 39085)
heartOfDarkness.words.counter <- seq(1, 39085)
heartOfDarkness.words.id <- paste0("HOD_", "WORD_", heartOfDarkness.words.counter)
heartOfDarkness.words.counter[1:10]
heartOfDarkness.words.id[1:10]
heartOfDarkness.words.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.words.type, heartOfDarkness.words.id, heartOfDarknessWords)
heartOfDarkness.words.df <- as.data.frame(heartOfDarkness.words.matrix)
head(heartOfDarkness.words.df)
tail(heartOfDarkness.words.df)
colnames(heartOfDarkness.words.df)
dbWriteTable(con, "textTable", heartOfDarkness.words.df, append=TRUE, row.names=FALSE, col.names=FALSE)
#writeLines(heartOfDarknessWords, "heartOfDarknessWords.txt")
con <- dbConnect(RSQLite::SQLite(), ":memory:", dbname="textTable.sqlite")
dbWriteTable(con, "textTable", heartOfDarkness.words.df, append=TRUE, row.names=FALSE, col.names=FALSE)
colnames(heartOfDarkness.words.df) <- c("Title", "Type", "ID", "Unit")
dbWriteTable(con, "textTable", heartOfDarkness.words.df, append=TRUE, row.names=FALSE)
dbGetQuery(con, "SELECT * FROM textTable WHERE Type= 'word' LIMIT 10")
dbDisconnect(con)
getwd()
## Example: Identifying Risky Bank Loans ----
## Step 2: Exploring and preparing the data ----
credit <- read.csv("credit_PACKT.csv")
setwd("~/Documents/7thSemester/ds/week10")
## Example: Identifying Risky Bank Loans ----
## Step 2: Exploring and preparing the data ----
credit <- read.csv("credit_PACKT.csv")
str(credit)
set.seed(101)
index <- createDataPartition(credit$default, p=0.8,list=F)
credit_train <- credit[index,]
credit_test <- credit[-index,]
# check the proportion of class variable
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
credit_model <- C5.0(credit_train[,-17], credit_train$default)
## Step 4: Evaluating model performance ----
# create a factor vector of predictions on test data
credit_pred <- predict(credit_model, credit_test)
load("~/Documents/7thSemester/ds/week10/VariousTestSets.RData")
credit_pred2 <- predict(credit_model, credit_test2)
CrossTable(credit_test2$default, credit_pred2,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
## Step 4: Evaluating model performance ----
# create a factor vector of predictions on test data
credit_pred <- predict(credit_model, credit_test)
credit_pred2 <- predict(credit_model, credit_test2)
credit_pred3 <- predict(credit_model, credit_test3)
credit_pred4 <- predict(credit_model, credit_test4)
credit_pred5 <- predict(credit_model, credit_test5)
CrossTable(credit_test2$default, credit_pred2,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
CrossTable(credit_test3$default, credit_pred3,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
CrossTable(credit_test4$default, credit_pred4,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
CrossTable(credit_test5$default, credit_pred5,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
CrossTable(credit_test2$default, credit_pred2,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
(126 + 14) / (126 + 14 + 25 + 35)
CrossTable(credit_test3$default, credit_pred3,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
(129 + 11) / (140 + 60)
# .7
CrossTable(credit_test4$default, credit_pred4,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
(140)  / (200)
CrossTable(credit_test5$default, credit_pred5,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('actual default', 'predicted default'))
(140) / 200
setwd("~/Documents/7thSemester/dmp/corpus")
getwd()
ls()
list()
setwd("~/Documents/7thSemester/dmp/corpus/paras")
setwd("~/Documents/7thSemester/dmp/corpus/scriptsAndDatabase")
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv")
View(heartOfDarkness.paragraphs)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs[,2]
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs[,2]
heartOfDarkness.paragraphs[2,]
heartOfDarkness.paragraphs[1:2,]
heartOfDarkness.paragraphs
heartOfDarkness.paragraphs[1:2]
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-(1:11)]
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-(1:12)]
c(1:12, 17)
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-c(1:12, 75, 113, 201:280)]
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
View(heartOfDarkness.paragraphs)
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-c(1:12, 75, 113, 212:292)]
tail(heartOfDarkness.paragraphs)
?gsub
test <- c("Hello\n we need to get\n rid of those pesky cha\nrs.")
test_out <- gsub("\n", " ", test)
test_out
test_out <- gsub("\n", "", test)
test_out
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs %>% gsub("\n", "")
heartOfDarkness.paragraphs <- gsub("\n", "", heartOfDarkness.paragraphs)
tail(heartOfDarkness.paragraphs)
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs$X0
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-c(1:12, 75, 113, 212:292)]
?str_replace_all
str_replace_all("\n", heartOfDarkness.paragraphs, "")
str_replace
?str_replace
fruits <- c("one apple", "two pears", "three bananas")
str_replace(fruits, "[aeiou]", "-")
str_replace("\n", heartOfDarkness.paragraphs, "")
heartOfDarkness.paragraphs[1]
str_replace("\n", heartOfDarkness.paragraphs[1], "")
str_replace("[\n]", heartOfDarkness.paragraphs[1], "")
?grep
grep(heartOfDarkness.paragraphs[1], "\n")
grep(heartOfDarkness.paragraphs[1], "\\n")
grep(heartOfDarkness.paragraphs[1], "[\n]")
grep(heartOfDarkness.paragraphs[1], "\\n")
heartOfDarkness.paragraphs[1]
str_replace_all("fjkdjfkdfj\njjkjk kjkj \n hellll\n", "[\r\n]" , "")
colnames(heartOfDarkness.paragraphs)
colnames(heartOfDarkness.paragraphs) <- c("para")
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-c(1:12, 75, 113, 212:292)]
colnames(heartOfDarkness.paragraphs) <- c("arbitrary", "para")
heartOfDarkness.paragraphs <- read.csv("../paras/HOD_paras.csv", stringsAsFactors = FALSE)
# get rid of junk
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs[-c(1:12, 75, 113, 212:292),]
colnames(heartOfDarkness.paragraphs) <- c("arbitrary", "para")
heartOfDarkness.paragraphs$arbitrary[2:22]
test <- heartOfDarkness.paragraphs %>%
rowwise() %>%
str_replace_all(para, "[\n]", "")
test <- heartOfDarkness.paragraphs %>%
str_replace_all(para, "[\n]", "")
?str_replace_all
test_it_out <- heartOfDarkness.paragraphs %>%
mutate(para = str_replace_all(para, "[\n]", ""))
tail(test_it_out)
test_it_out[2:5,]
heartOfDarkness.paragraphs[2:5,]
test_it_out[2,]
heartOfDarkness.paragraphs[2,]
test_it_out <- heartOfDarkness.paragraphs %>%
mutate(para = str_replace_all(para, "[\n]", " "))
test_it_out[2,]
heartOfDarkness.paragraphs[2,]
write.csv(test_it_out[2,], "testtest.csv")
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs %>%
mutate(para = str_replace_all(para, "[\n]", " ")) %>%
subset(para)
heartOfDarkness.paragraphs <- heartOfDarkness.paragraphs %>%
mutate(para = str_replace_all(para, "[\n]", " ")) %>%
select(para)
heartOfDarkness.paragraphs[3]
heartOfDarkness.paragraphs[3,]
heartOfDarkness.title <- rep("heartOfDarkness", 197)
heartOfDarkness.sents.type <- rep("paragraph", 197)
# now put those into a matrix
heartOfDarkness.sents.counter <- seq(1, 197)
heartOfDarkness.title <- rep("heartOfDarkness", 197)
heartOfDarkness.paragraphs.type <- rep("paragraph", 197)
heartOfDarkness.paragraphs.counter <- seq(1, 197)
heartOfDarkness.paragraphs.id <- paste0("HOD_", "PARAGRAPH_", heartOfDarkness.paragraphs.counter)
length(heartOfDarkness.title)
length(heartOfDarkness.paragraphs$para)
heartOfDarkness.pargraphs.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.words.type, heartOfDarkness.words.id, heartOfDarkness.paragraphs$para)
heartOfDarkness.pargraphs.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.paragraphs.type, heartOfDarkness.paragraphs.id, heartOfDarkness.paragraphs$para)
heartOfDarkness.pagraphs.df <- as.data.frame(heartOfDarkness.paragraphs.matrix)
heartOfDarkness.paragraphs.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.paragraphs.type, heartOfDarkness.paragraphs.id, heartOfDarkness.paragraphs$para)
heartOfDarkness.pagraphs.df <- as.data.frame(heartOfDarkness.paragraphs.matrix)
colnames(heartOfDarkness.paragraphs.df) <- c("Title", "Type", "ID", "Unit")
heartOfDarkness.paragraphs.matrix <- cbind(heartOfDarkness.title, heartOfDarkness.paragraphs.type, heartOfDarkness.paragraphs.id, heartOfDarkness.paragraphs$para)
heartOfDarkness.paragraphs.df <- as.data.frame(heartOfDarkness.paragraphs.matrix)
colnames(heartOfDarkness.paragraphs.df) <- c("Title", "Type", "ID", "Unit")
head(heartOfDarkness.pagraphs.df)
con <- dbConnect(RSQLite::SQLite(), ":memory:", dbname="textTable.sqlite")
### Columns.
# we should no longer need to set the column names
dbWriteTable(con, "textTable", heartOfDarkness.paragraphs.df, append=TRUE, row.names=FALSE)
dbGetQuery(con, "SELECT * FROM textTable WHERE Type='paragraph' LIMIT 2")
dbGetQuery(con, "SELECT Unit FROM textTable WHERE Type='paragraph' LIMIT 2")
summary(con)
dbDisconnect(con)
